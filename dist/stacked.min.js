var Stacked;!function(){"use strict";Stacked={Collection:{},Model:{Type:{},Deck:null},View:{}},Stacked.Model.Card=Backbone.Model.extend({defaults:{type:"",suit:"",value:0}}),Stacked.Model.Deck=Backbone.Model.extend({defaults:{decks:1,type:null,cards:null},initialize:function(){var e=this.get("type"),t=new Stacked.Model.Type[e];this.set({set:t}),this.replenish()},replenish:function(){for(var e=this.get("type"),t=new Stacked.Model.Type[e],n=new Stacked.Collection.Cards,a=0;a<this.get("decks");a++)_.each(t.get("suits"),function(a){_.each(t.get("cards"),function(t){n.add({type:e,suit:a,value:t})})});this.set({cards:n})},shuffle:function(){var e=[];this.get("cards").shuffle().forEach(function(t){e.push(t)}),this.get("cards").reset(e)},pop:function(){var e=this.get("cards").last();return this.get("cards").remove(e),e}}),Stacked.Model.Game=Backbone.Model.extend({defaults:{players:null,type:null,deck:null,cards:7},initialize:function(){this.deal()},reset:function(){this.get("deck").replenish(),this.get("players").forEach(function(e){e.get("hand").reset()})},deal:function(){var e=0,t=this.get("deck");for(this.reset(),t.shuffle();e<this.get("cards");)this.get("players").forEach(function(e){e.get("hand").add(t.pop())}),e++}}),Stacked.Model.Player=Backbone.Model.extend({defaults:{name:"",hand:null},initialize:function(){this.set("hand",new Stacked.Collection.Hand)}}),Stacked.Model.Type.Base=Backbone.Model.extend({defaults:{cards:[],suits:[]}}),Stacked.Model.Type.Spanish=Stacked.Model.Type.Base.extend({defaults:{cards:[1,2,3,4,5,6,7,10,11,12],suits:["cups","clubs","coins","swords"]}}),Stacked.Collection.Cards=Backbone.Collection.extend({model:Stacked.Model.Card}),Stacked.Collection.Hand=Backbone.Collection.extend({model:Stacked.Model.Card,updateValues:function(e){$.each(e,_.bind(function(e,t){this.at(e).set(t)},this))},grouped:function(){for(var e,t=[],n=this.toJSON(),a=function(e,t){return e.map(function(e){return t[e]})},i=function(e){var t,n,a=[[]],i=0;return e.forEach(function(d,o){t=!(o===e.length-1),n=!(d===e[o+1]-1),a[i].push(d),t&&n&&(i++,a[i]=[])}),a},d=function(e){var t={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,10:8,11:9,12:10},n=[],d=_.groupBy(e,"suit");return _.each(d,function(e){var d=_.sortBy(_.pluck(e,"value"),function(e){return e}),o=a(d,t),c=i(o);c=c.map(function(e){return e.map(function(e){return _.invert(t)[e]})}),c.forEach(function(t){var a=_.filter(e,function(e){return t.indexOf(e.value+"")>-1});n.push(a),d=_.filter(d,function(e){return-1===t.indexOf(e)})})}),_.each(_.groupBy(e,"value"),function(e){n.push(e)}),n=_.sortBy(n,"length").reverse(),_.max(n,function(e){return e.length})},o=function(e,t){return _.filter(e,function(e){return!_.findWhere(t,e)})};n.length;)e=d(n),t.push(e),n=o(n,e);return t}}),Stacked.Collection.Players=Backbone.Collection.extend({model:Stacked.Model.Player}),Stacked.View.Card=Backbone.View.extend({events:{change:"render"},render:function(){var e=this.model.toJSON();e.cid=this.model.cid,this.$el.append(ich.card(e))}}),Stacked.View.Game=Backbone.View.extend({players:[],options:{},initialize:function(e){var t=this.el,n=[];this.options=e,this.$el.addClass(this.model.get("deck").get("type").toLowerCase()+" game"),this.model.get("players").each(function(e){n.push(new Stacked.View.Player({el:t,model:e}))}),this.players=n},render:function(){this.$el.empty(),_.each(this.players,function(e){e.render()}),$(this.options.parentEl).html(this.el)},score:function(){}}),Stacked.View.Hand=Backbone.View.extend({tagName:"ul",className:"hand",events:{"sortstop ":"reorder"},cards:[],initialize:function(){var e=this.el,t=[];this.model.each(function(n){t.push(new Stacked.View.Card({el:e,model:n}))}),this.cards=t},render:function(){this.el;this.$el.empty(),_.each(this.cards,function(e){e.render()}),this.$el.sortable({axis:"x",cursor:"move",placeholder:"card-drop-target",tolerance:"pointer",containment:"parent"})},reorder:function(){var e=[];this.$(".card").each(function(t,n){e.push($(n).data())}),this.model.updateValues(e),this.render()}}),Stacked.View.Player=Backbone.View.extend({render:function(){var e,t=new Stacked.View.Hand({model:this.model.get("hand")});t.render(),e=$(ich.player(this.model.toJSON())),$(".name",e).after(t.el),this.$el.append(e)}})}();